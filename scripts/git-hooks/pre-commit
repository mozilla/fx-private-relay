#!/bin/sh
# Pre-commit hook to run formatters and linters

echo "üîç Running pre-commit checks..."

STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)
if [ -z "$STAGED_FILES" ]; then
  echo "‚úÖ No staged files to check"
  exit 0
fi

# First, format files
# Prettier for frontend
echo "üßπ Formatting with Prettier..."
frontend_files=$( echo $STAGED_FILES | grep -E '^(frontend/.*\.(ts|tsx|js|jsx|scss|css)|e2e-tests/.*\.ts|.*\.md)$')
[ -n "$frontend_files" ] && echo "$frontend_files" | xargs npx prettier --write

# black for python
PY_FILES=$(echo "$STAGED_FILES" | grep -E '\.py$')
if [ -n "$PY_FILES" ]; then
  echo "üêç Formatting Python with black..."
  echo "$PY_FILES" | xargs black
fi

# Next, lint files
PASS=true

# Stylelint
echo "üé® Linting SCSS/CSS with stylelint..."
css_files=$(echo "$STAGED_FILES" | grep -E '^frontend/.*\.(scss|css)$')
for FILE in $css_files; do
  if npx stylelint --fix "$FILE"; then
    echo "‚úÖ $FILE passed stylelint"
  else
    echo "‚ùå $FILE failed stylelint"
    PASS=false
  fi
done

# Next.js lint
echo "üß™ Running Next.js lint..."
FRONTEND_TS=$(echo "$STAGED_FILES" | grep -E '^frontend/.*\.(ts|tsx|js|jsx)$')
if [ -n "$FRONTEND_TS" ]; then
  FILE_ARGS=$(echo "$FRONTEND_TS" | xargs -n1 echo --file | xargs)
  npx next lint frontend --fix $FILE_ARGS
fi

# Python tools
PY_FILES=$(echo "$STAGED_FILES" | grep -E '\.py$')
if [ -n "$PY_FILES" ]; then
  echo "üìä Type checking Python with mypy..."
  echo "$PY_FILES" | xargs mypy
  echo "üßº Linting Python with ruff..."
  echo "$PY_FILES" | xargs ruff check --fix
fi

# ESLint (for each file individually)
echo "üîé Running ESLint..."
for FILE in $STAGED_FILES; do
  if echo "$FILE" | grep -q '^frontend/'; then
    if eslint --config frontend/.eslintrc.js "$FILE"; then
      echo "‚úÖ $FILE passed ESLint"
    else
      echo "‚ùå $FILE failed ESLint"
      PASS=false
    fi
  fi
done

if ! $PASS; then
  echo "üö´ Commit aborted due to ESLint errors"
  exit 1
fi

if git diff --cached --quiet; then
  echo "üö´ Commit aborted: no staged changes to commit."
  exit 1
fi

# Re-add files that may have been fixed
echo "‚ûï Re-adding fixed files to commit..."
echo "$STAGED_FILES" | xargs git add

echo "‚úÖ All pre-commit checks passed!"
exit 0
