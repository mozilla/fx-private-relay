# These environment variables must be set in CircleCI UI
#
# DOCKERHUB_REPO - docker hub repo, format: <username>/<repo>
# DOCKER_USER    - login info for docker hub
# DOCKER_PASS
# COVERALLS_REPO_TOKEN - used by coveralls-python
# HEROKU_APP_NAME - Name on Heroku
# HEROKU_API_KEY - API key from service account
#
version: 2.1
orbs:
  node: circleci/node@5.1.0
  python: circleci/python@2.1.1
  heroku: circleci/heroku@1.2.6
commands:
  checkout_with_submodules:
    description: Checkout Relay code and submodules
    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
executors:
  python:
    docker:
      - image: cimg/python:3.10.9
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
jobs:
  build_frontend:
    docker:
      - image: cimg/node:18.12
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    steps:
      - checkout_with_submodules
      - node/install:
          node-version: '18'
      - node/install-packages:
        override-ci-command: npm ci --workspace frontend
      - run:
          name: Build Code
          command: npm run build --workspace frontend
      - save_cache:
          key: v1-frontend-build-{{ .Branch }}-{{ .Revision }}
          paths:
            - ./frontend/out/

  test_frontend:
    docker:
      - image: cimg/node:18.12
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    steps:
      - checkout
      - node/install:
          node-version: '18'
      - node/install-packages:
        override-ci-command: npm ci --workspace frontend
      - run:
          name: Check licences of frontend dependencies
          command: npm run licensecheck --workspace frontend
      - run:
          name: Lint Code
          command: npm run lint --workspace frontend -- --max-warnings=0
      - run:
          name: Test Code
          command: |
            mkdir --parents /tmp/workspace/test-results/frontend-coverage
            npm test --workspace frontend -- \
              --ci \
              --coverageDirectory=/tmp/workspace/test-results/frontend-coverage
      - store_test_results:
          path: frontend/junit.xml
      - store_artifacts:
          path: /tmp/workspace/test-results/frontend-coverage
          destination: frontend_test_coverage
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - test-results/frontend-coverage

  convert_frontend_coverage:
    docker:
      - image: cimg/ruby:2.7.2
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run: gem install coveralls-lcov
      - run:
          name: Add frontend prefix to lcov.info
          command: |
            sed 's|^SF:|SF:frontend/|' \
              /tmp/workspace/test-results/frontend-coverage/lcov.info \
              > /tmp/workspace/test-results/frontend-coverage/lcov-prefixed.info
      - run:
          name: Generate coveralls.json report
          command: |
            coveralls-lcov \
              --verbose --dry-run \
              /tmp/workspace/test-results/frontend-coverage/lcov-prefixed.info \
              > /tmp/workspace/test-results/frontend-coverage/coveralls.json
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - test-results/frontend-coverage/lcov-prefixed.info
            - test-results/frontend-coverage/coveralls.json
  
  build_email_tracker_list_job:
    executor: python
    steps:
      - checkout_with_submodules
      - python/install-packages:
          pkg-manager: pip
      - run:
          name: Set test defaults
          command: cp .env-dist .env
      - run:
          name: Build level one email tracker list
          command: ./manage.py get_latest_email_tracker_lists
      - run:
          name: Build level two email tracker list
          command: ./manage.py get_latest_email_tracker_lists --tracker-level=2
      - run:
          name: Copy email tracker lists to persisted workspace
          command: |
            mkdir --parents /tmp/workspace/email-trackers
            cp /home/circleci/project/emails/tracker_lists/level-one-trackers.json /tmp/workspace/email-trackers/
            cp /home/circleci/project/emails/tracker_lists/level-two-trackers.json /tmp/workspace/email-trackers/
      - persist_to_workspace:
            root: /tmp/workspace
            paths:
              - email-trackers/level-one-trackers.json
              - email-trackers/level-two-trackers.json

  build_test_backend:
    docker:
      - image: docker:stable-git
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    working_directory: /dockerflow
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout_with_submodules
      - setup_remote_docker:
          # Use a version of Docker that works with Node, see
          # https://support.circleci.com/hc/en-us/articles/360050934711-Docker-build-fails-with-EPERM-operation-not-permitted-copyfile-when-using-node-14-9-0-or-later-
          # (apparently version 17.09.0-ce is lower than 1.9.1, but 19.03.13 is not?)
          # and
          # https://github.com/nodejs/docker-node#supported-docker-versions
          # and
          # https://circleci.com/docs/2.0/building-docker-images/#docker-version
          version: 20.10.11
          docker_layer_caching: True
      - restore_cache:
          key: v1-frontend-build-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Copy build artefacts from build_frontend into this folder
          command: mv /home/circleci/project/frontend/out /dockerflow/frontend/

      - run:
          name: Copy email tracker lists into this folder
          command: |
            cp /tmp/workspace/email-trackers/level-one-trackers.json /dockerflow/emails/tracker_lists/
            cp /tmp/workspace/email-trackers/level-two-trackers.json /dockerflow/emails/tracker_lists/

      - run:
          name: Create a version.json
          command: |
            # create a version.json per https://github.com/mozilla-services/Dockerflow/blob/master/docs/version_object.md
            printf '{"commit":"%s","version":"%s","source":"https://github.com/%s/%s","build":"%s"}\n' \
            "$CIRCLE_SHA1" \
            "$CIRCLE_TAG" \
            "$CIRCLE_PROJECT_USERNAME" \
            "$CIRCLE_PROJECT_REPONAME" \
            "$CIRCLE_BUILD_URL" > version.json

      - run:
          name: Build Docker image
          command: |
            docker build --tag fx-private-relay \
            --build-arg CIRCLE_BRANCH="$CIRCLE_BRANCH" \
            --build-arg CIRCLE_TAG="$CIRCLE_TAG" \
            --build-arg CIRCLE_SHA1="$CIRCLE_SHA1" \
            .

      - run:
          name: Test Code
          command: |
            # Create a volume owned by the app user
            docker run \
              --volume /tmp/workspace \
              --name workspace-test-results \
              alpine \
              /bin/sh -c \
                "chmod 0777 /tmp/workspace && \
                 chown 10001:10001 /tmp/workspace"

            # Run coverage tests, outputting the results in XML format, capture exit code
            set +e
            docker run \
              --entrypoint "/bin/bash" \
              --volumes-from workspace-test-results \
              -e PHONES_ENABLED=$PHONES_ENABLED \
              fx-private-relay \
              -c \
                'mkdir --parents /tmp/workspace/test-results/pytest && \
                 mkdir --parents /tmp/workspace/test-results/backend-coverage && \
                 /app/.local/bin/pytest \
                   --cov=. \
                   --cov-config=.coveragerc \
                   --cov-report=term-missing \
                   --cov-report=xml \
                   --cov-fail-under=60 \
                   --cov-branch \
                   --junitxml=/tmp/workspace/test-results/pytest/results.xml ; \
                 STATUS=$?
                 mv coverage.xml /tmp/workspace/test-results/backend-coverage/results.xml ; \
                 mv .coverage /tmp/workspace/test-results/backend-coverage/.coverage; \
                 exit $STATUS'
            TEST_STATUS=$?
            set -e

            # Copy results to local disk
            mkdir --parents /tmp/workspace/
            docker cp workspace-test-results:/tmp/workspace/test-results /tmp/workspace

            # Exit with test error code
            exit $TEST_STATUS

      - store_test_results:
          path: /tmp/workspace/test-results/pytest

      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - test-results/pytest
            - test-results/backend-coverage

      - run:
          name: Check if deploying
          command: |
            if [ "${CIRCLE_BRANCH}" != "main" ] && [ -z "${CIRCLE_TAG}" ]; then
              echo "Skipping exporting Docker image, not main branch or tag."
              circleci step halt
            fi
            # https://stackoverflow.com/a/18558871/10612
            if case $CIRCLE_TAG in addon-*) ;; *) false;; esac; then
              echo "Skipping exporting Docker image, ${CIRCLE_TAG} has addon- prefix."
              circleci step halt
            fi

      # save the built docker container into CircleCI's cache. This is
      # required since Workflows do not have the same remote docker instance.
      - run:
          name: docker save fx-private-relay
          command: |
            mkdir --parents /tmp/workspace;
            docker save --output /tmp/workspace/docker.tar "fx-private-relay"
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - docker.tar

  upload_coverage:
    docker:
      - image: cimg/python:3.10.9-node
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: Upload coverage
          command: |
            pip install coveralls
            cp /tmp/workspace/test-results/backend-coverage/.coverage .
            coveralls --merge=/tmp/workspace/test-results/frontend-coverage/coveralls.json

  deploy:
    docker:
      - image: docker:18.02.0-ce
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    steps:
      - setup_remote_docker:
          docker_layer_caching: True
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Restore Docker image cache
          command: docker load --input /tmp/workspace/docker.tar

      - run:
          name: Deploy to Dockerhub
          command: |
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
            # deploy master
            if [ "${CIRCLE_BRANCH}" == "main" ]; then
              docker tag fx-private-relay ${DOCKERHUB_REPO}:latest
              docker push ${DOCKERHUB_REPO}:latest
            elif  [ ! -z "${CIRCLE_TAG}" ]; then
            # deploy a release tag...
              echo "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
              docker tag fx-private-relay "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
              docker images
              docker push "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
            fi

  heroku_deploy:
    executor: heroku/default
    steps:
      - checkout
      - heroku/install
      - heroku/deploy-via-git

  python_job:
    executor: python
    parameters:
      command:
        description: "What command should the job run?"
        default: "exit 1"
        type: string
      has_results:
        description: "Job will place JUnit XML in job-results subfolder"
        type: boolean
        default: false
      allow_fail:
        description: "Allow the command to fail without failing job."
        type: boolean
        default: false
      production_with_new_migrations:
        description: "Test if deployed code will work with new migrations."
        type: boolean
        default: false
    steps:
      - checkout_with_submodules
      - python/install-packages:
          pkg-manager: pip
      - when:
          condition: << parameters.has_results >>
          steps:
            - run:
                name: Create job-results directory
                command: mkdir job-results
      - run:
          name: Set test defaults
          command: cp .env-dist .env
      - run:
          name: Create empty staticfiles directory
          command: mkdir -p staticfiles
      - when:
          condition: << parameters.production_with_new_migrations >>
          steps:
            - run:
                name: Switch to production tag with branch's migrations
                command: |
                  echo 'export PROD_TAG=$(curl --silent https://relay.firefox.com/__version__ | jq -r ".version")' >> $BASH_ENV
                  source $BASH_ENV
                  echo "# Production tag is ${PROD_TAG}"
                  git fetch --force origin tag ${PROD_TAG}
                  git checkout ${PROD_TAG}
                  git submodule update --init --recursive
                  git checkout --theirs "${CIRCLE_SHA1}" -- '**/migrations/**'
                  git status
      - unless:
          condition: << parameters.allow_fail >>
          steps:
            - run: << parameters.command >>
      - when:
          condition: << parameters.allow_fail >>
          steps:
            - run:
                name: << parameters.command >> (failure allowed)
                command: |
                  set +x
                  << parameters.command >> ||
                  echo "*** Command '<< parameters.command >>' failed, but it is allowed to fail. ***"
      - when:
          condition: << parameters.has_results >>
          steps:
            - store_test_results:
                path: job-results

  python_test_postgres:
    docker:
      - image: cimg/python:3.10.9
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
      - image: cimg/postgres:11.13
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 6edef2d746f2274cab951a452d5fc13d
          POSTGRES_DB: circle
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    parameters:
      production_with_new_migrations:
        description: "Test if deployed code will work with new migrations."
        type: boolean
        default: false
      test_file_name:
        description: "Name of the test report"
        type: string
        default: "report.xml"
    steps:
      - checkout_with_submodules
      - python/install-packages:
          pkg-manager: pip
      - run:
          name: Install dockerize
          command: |
            wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz &&
            sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz &&
            rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.6.1
      - run:
          name: Wait for the database
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Set test defaults
          command: cp .env-dist .env
      - run:
          name: Create test-report directory
          command: mkdir test-report
      - when:
          condition: << parameters.production_with_new_migrations >>
          steps:
            - run:
                name: Switch to production tag with branch's migrations
                command: |
                  echo 'export PROD_TAG=$(curl --silent https://relay.firefox.com/__version__ | jq -r ".version")' >> $BASH_ENV
                  source $BASH_ENV
                  echo "# Production tag is ${PROD_TAG}"
                  git fetch --force origin tag ${PROD_TAG}
                  git checkout ${PROD_TAG}
                  git submodule update --init --recursive
                  git checkout --theirs "${CIRCLE_SHA1}" -- '**/migrations/**'
                  git status
      - run:
          name: Run tests
          command: pytest --junit-xml=test-report/<< parameters.test_file_name >> .
          environment:
            DATABASE_URL: postgresql://postgres:6edef2d746f2274cab951a452d5fc13d@localhost/circle
      - store_test_results:
          path: test-report

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build_frontend:
          filters:
            tags:
              only: /.*/

      - build_email_tracker_list_job:
          filters:
            tags:
              only: /.*/

      - build_test_backend:
          requires:
            - build_email_tracker_list_job
            - build_frontend
          filters:
            tags:
              only: /.*/

      - python_job:
          name: black style check
          command: black --check .
          filters:
            tags:
              only: /.*/

      - python_job:
          name: mypy type check
          command: mypy --no-incremental --junit-xml job-results/mypy.xml .
          has_results: true
          filters:
            tags:
              only: /.*/

      - python_job:
          name: mypy strict type check
          command: mypy --strict --no-incremental --junit-xml job-results/mypy.xml .
          has_results: true
          allow_fail: true
          filters:
            tags:
              only: /.*/

      - python_test_postgres:
          filters:
            tags:
              only: /.*/

      - python_job:
          name: sqlite migrations test
          command: pytest --maxfail=3 --junit-xml=job-results/pytest-migrations.xml .
          has_results: true
          allow_fail: false
          production_with_new_migrations: true
          filters:
            tags:
              only: /.*/

      - python_test_postgres:
          name: postgres migrations test
          production_with_new_migrations: true
          test_file_name: psql_migrations.xml
          filters:
            tags:
              only: /.*/

      - python_job:
          name: python test phones disabled
          command: PHONES_ENABLED=0 IQ_ENABLED=0 pytest --junit-xml=job-results/pytest-phones-disabled.xml .
          has_results: true
          filters:
            tags:
              only: /.*/

      - python_job:
          name: django 4.2 test
          # YAML ">-" removes newlines, including the last, needed for
          # multi-step command that can fail.
          command: >-
            pip install --pre --upgrade "Django<5";
            pytest --maxfail=3 --junit-xml=job-results/pytest-django-4-2.xml .
          has_results: true
          allow_fail: true
          filters:
            tags:
              only: /.*/

      - python_job:
          name: python test iq enabled
          command: PHONES_ENABLED=1 IQ_ENABLED=1 pytest --junit-xml=job-results/pytest-iq-enabled.xml .
          has_results: true
          filters:
            tags:
              only: /.*/

      - test_frontend:
          requires:
            - build_frontend
          filters:
            tags:
              only: /.*/

      - convert_frontend_coverage:
          requires:
            - test_frontend
          filters:
            tags:
              only: /.*/

      - upload_coverage:
          requires:
            - convert_frontend_coverage
            - build_test_backend
          filters:
            tags:
              only: /.*/

      - deploy:
          requires:
            - build_test_backend
          filters:
            tags:
              ignore: /addon-.*/
            branches:
              only: main

      - heroku_deploy:
          requires:
            - build_test_backend
          filters:
            branches:
              only: main
